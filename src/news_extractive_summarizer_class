from transformers import BartTokenizer, BartForConditionalGeneration

class FineTunedBartSummarizer:
    def __init__(self, model_path='fine_tuned_bart'):
        self.model = BartForConditionalGeneration.from_pretrained(model_path)
        self.tokenizer = BartTokenizer.from_pretrained(model_path)
    
    def summarize(self, text=None, length="medium"):
        if text is None:
            return "No text provided for summarization."

        max_length_map = {
            "short": 100,
            "medium": 150,
            "long": 250
        }
        max_length = max_length_map.get(length, 150)

        # Tokenize the input text
        inputs = self.tokenizer(text, return_tensors="pt", max_length=1024, truncation=True, padding=True)

        # Adjust min_length based on max_length
        min_length = max(30, int(max_length * 0.2))

        # Generate the summary
        summary_ids = self.model.generate(
            inputs['input_ids'],
            max_length=max_length,
            min_length=min_length,
            length_penalty=2.0,
            num_beams=4,
            early_stopping=True
        )

        # Decode the summary back to text
        summary = self.tokenizer.decode(summary_ids[0], skip_special_tokens=True)
        return summary
